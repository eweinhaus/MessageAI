graph TB
    subgraph "Client Layer - React Native + Expo"
        UA["üë§ User A's Phone<br/>React Native App"]
        UB["üë§ User B's Phone<br/>React Native App"]
        
        subgraph "User A - App Components"
            UAComp["üé® UI Components<br/>‚Ä¢ Chat Screen<br/>‚Ä¢ Message List<br/>‚Ä¢ Contact Picker<br/>‚Ä¢ Auth Screens<br/>‚Ä¢ Chat List (Priority Ordered)<br/>‚Ä¢ Global Summary Modal<br/>‚Ä¢ Action Items Tab<br/>‚Ä¢ Smart Search Tab"]
            UAState["üì¶ Zustand State<br/>‚Ä¢ Current User<br/>‚Ä¢ Active Chats (Priority Sorted)<br/>‚Ä¢ Messages by Chat<br/>‚Ä¢ Network Status<br/>‚Ä¢ Sync Queue<br/>‚Ä¢ Global AI Summary<br/>‚Ä¢ Priority Scores<br/>‚Ä¢ Unread Watermarks"]
            UASQL["üíæ SQLite Database<br/>‚Ä¢ Messages (with syncStatus)<br/>‚Ä¢ Chat Metadata<br/>‚Ä¢ Pending Queue<br/>‚Ä¢ Last Sync Timestamp"]
            UANotif["üîî Expo Notifications<br/>‚Ä¢ FCM Receiver<br/>‚Ä¢ In-App Toast Handler<br/>‚Ä¢ Foreground Only"]
            UANet["üì° NetInfo Listener<br/>‚Ä¢ Network Status<br/>‚Ä¢ Online/Offline Detection<br/>‚Ä¢ Auto-Reconnect Trigger"]
            UAAI["ü§ñ Global AI Service Client<br/>‚Ä¢ Summary on App Open<br/>‚Ä¢ Priority Detection (Background)<br/>‚Ä¢ Action Items Extraction<br/>‚Ä¢ Smart Search (Two-Stage)<br/>‚Ä¢ Error Handling"]
        end
        
        subgraph "User B - App Components"
            UBComp["üé® UI Components<br/>‚Ä¢ Chat Screen<br/>‚Ä¢ Message List<br/>‚Ä¢ Contact Picker<br/>‚Ä¢ Auth Screens<br/>‚Ä¢ Chat List (Priority Ordered)<br/>‚Ä¢ Global Summary Modal<br/>‚Ä¢ Action Items Tab<br/>‚Ä¢ Smart Search Tab"]
            UBState["üì¶ Zustand State<br/>‚Ä¢ Current User<br/>‚Ä¢ Active Chats (Priority Sorted)<br/>‚Ä¢ Messages by Chat<br/>‚Ä¢ Network Status<br/>‚Ä¢ Sync Queue<br/>‚Ä¢ Global AI Summary<br/>‚Ä¢ Priority Scores<br/>‚Ä¢ Unread Watermarks"]
            UBSQL["üíæ SQLite Database<br/>‚Ä¢ Messages (with syncStatus)<br/>‚Ä¢ Chat Metadata<br/>‚Ä¢ Pending Queue<br/>‚Ä¢ Last Sync Timestamp"]
            UBNotif["üîî Expo Notifications<br/>‚Ä¢ FCM Receiver<br/>‚Ä¢ In-App Toast Handler<br/>‚Ä¢ Foreground Only"]
            UBNet["üì° NetInfo Listener<br/>‚Ä¢ Network Status<br/>‚Ä¢ Online/Offline Detection<br/>‚Ä¢ Auto-Reconnect Trigger"]
            UBAI["ü§ñ Global AI Service Client<br/>‚Ä¢ Summary on App Open<br/>‚Ä¢ Priority Detection (Background)<br/>‚Ä¢ Action Items Extraction<br/>‚Ä¢ Smart Search (Two-Stage)<br/>‚Ä¢ Error Handling"]
        end
        
        UA --> UAComp
        UA --> UAState
        UA --> UASQL
        UA --> UANotif
        UA --> UANet
        UA --> UAAI
        
        UB --> UBComp
        UB --> UBState
        UB --> UBSQL
        UB --> UBNotif
        UB --> UBNet
        UB --> UBAI
    end
    
    subgraph "Real-Time Listeners - Firestore SDK"
        ListenerA["üì° Firestore Listener A<br/>onSnapshot: /chats where<br/>participantIDs contains userA"]
        ListenerB["üì° Firestore Listener B<br/>onSnapshot: /chats where<br/>participantIDs contains userB"]
        
        PresenceA["üì° Presence Listener A<br/>onSnapshot: /users/{userB}<br/>Field: isOnline"]
        PresenceB["üì° Presence Listener B<br/>onSnapshot: /users/{userA}<br/>Field: isOnline"]
        
        MsgListenerA["üì° Message Listener A<br/>onSnapshot: /chats/{chatID}<br/>/messages orderBy timestamp"]
        MsgListenerB["üì° Message Listener B<br/>onSnapshot: /chats/{chatID}<br/>/messages orderBy timestamp"]
        
        ActionItemsListener["üì° Action Items Listener<br/>collectionGroup: /actionItems<br/>where userId == currentUser"]
        
        SummaryListener["üì° Summary Listener<br/>onSnapshot: /users/{userId}<br/>/aiCache/globalSummary"]
    end
    
    subgraph "Cloud Layer - Firebase"
        AUTH["üîê Firebase Auth<br/>‚Ä¢ Google Sign-In<br/>‚Ä¢ Session Management<br/>‚Ä¢ Token Auto-Refresh<br/>‚Ä¢ onAuthStateChanged"]
        
        FS["‚òÅÔ∏è Firestore<br/>(Source of Truth)<br/><br/>Collections:<br/>‚Ä¢ /users<br/>‚Ä¢ /chats<br/>‚Ä¢ /chats/{id}/messages<br/>‚Ä¢ /chats/{id}/typing<br/><br/>Global AI Collections:<br/>‚Ä¢ /actionItems (global)<br/>‚Ä¢ /users/{id}/aiCache/globalSummary<br/>‚Ä¢ /users/{id}/aiCache/chatPriorities/{chatId}<br/>‚Ä¢ /users/{id}/watermarks"]
        
        CF["‚ö° Cloud Functions<br/><br/>onMessageCreated:<br/>‚Ä¢ Check recipient online<br/>‚Ä¢ Get FCM token<br/>‚Ä¢ Send push (foreground)<br/><br/>Global AI Callable Functions:<br/>‚Ä¢ summarizeUnread (delta processing)<br/>‚Ä¢ analyzePriorityBatch (bulk)<br/>‚Ä¢ extractActionItems (global)<br/>‚Ä¢ searchMessages (two-stage)<br/>‚Ä¢ updateWatermarks<br/><br/>Scheduled:<br/>‚Ä¢ Clean old presence data<br/>‚Ä¢ Clean expired AI cache"]
        
        FCM["üì¢ Firebase Cloud<br/>Messaging (FCM)<br/>‚Ä¢ Push to Device A<br/>‚Ä¢ Push to Device B<br/>‚Ä¢ Foreground Only"]
    end
    
    subgraph "AI Layer - OpenAI"
        OPENAI["üß† OpenAI API<br/><br/>Models:<br/>‚Ä¢ GPT-4o-mini (fast, cheap)<br/>‚Ä¢ GPT-4-turbo (accurate)<br/><br/>Use Cases:<br/>‚Ä¢ Summary: gpt-4o-mini<br/>‚Ä¢ Priority: gpt-4o-mini<br/>‚Ä¢ Search Stage 1: gpt-4o-mini<br/>‚Ä¢ Search Stage 2: gpt-4-turbo<br/><br/>Context Window: 128K tokens"]
        
        LANGCHAIN["üîó Langchain<br/><br/>‚Ä¢ Prompt Templates<br/>‚Ä¢ Output Parsers<br/>‚Ä¢ LLM Chains<br/>‚Ä¢ Delta Processing"]
    end
    
    subgraph "Data Flow: Send Message"
        SEND["1Ô∏è‚É£ User A types 'Hello'<br/>2Ô∏è‚É£ Tap Send<br/>3Ô∏è‚É£ Write to SQLite immediately<br/>   (syncStatus: pending)<br/>4Ô∏è‚É£ Show in UI (optimistic)<br/>5Ô∏è‚É£ Async: Write to Firestore<br/>6Ô∏è‚É£ On success: Update SQLite<br/>   (syncStatus: synced)<br/>7Ô∏è‚É£ Update UI (sent ‚úì)"]
    end
    
    subgraph "Data Flow: Receive Message"
        RECEIVE["1Ô∏è‚É£ Firestore message created<br/>2Ô∏è‚É£ Listener B fires<br/>3Ô∏è‚É£ Write to SQLite<br/>4Ô∏è‚É£ Update Zustand state<br/>5Ô∏è‚É£ UI re-renders (new message)<br/>6Ô∏è‚É£ CF sends FCM notification<br/>7Ô∏è‚É£ User B sees in-app toast<br/>8Ô∏è‚É£ User B views message<br/>9Ô∏è‚É£ Update readBy in Firestore<br/>üîü Listener A fires ‚Üí read receipt"]
    end
    
    subgraph "Data Flow: Offline ‚Üí Online"
        OFFLINE["1Ô∏è‚É£ User A offline (airplane mode)<br/>2Ô∏è‚É£ Types 'Are you free?'<br/>3Ô∏è‚É£ Tap Send<br/>4Ô∏è‚É£ Write to SQLite (pending)<br/>5Ô∏è‚É£ Show 'Offline' banner<br/>6Ô∏è‚É£ NetInfo detects online<br/>7Ô∏è‚É£ Hide banner<br/>8Ô∏è‚É£ Process pending queue:<br/>   - Query SQLite for pending<br/>   - Retry with backoff (1s, 2s, 4s...)<br/>   - Max 5 attempts<br/>9Ô∏è‚É£ On success: Update to synced<br/>üîü Normal flow resumes"]
    end
    
    subgraph "Data Flow: Presence"
        PRESENCE["1Ô∏è‚É£ App foreground:<br/>   - setUserOnline(userID)<br/>   - Write to /users/{id}<br/>   - Start heartbeat (8s)<br/>2Ô∏è‚É£ App background:<br/>   - Stop heartbeat<br/>   - Sets isOnline: false<br/>3Ô∏è‚É£ Listener fires<br/>4Ô∏è‚É£ UI updates (gray dot)<br/><br/>Staleness: 20s timeout"]
    end
    
    subgraph "Sync Strategy"
        SYNC["SQLite = Read Cache + Write Queue<br/>Firestore = Source of Truth<br/><br/>On Startup:<br/>1. Read SQLite (instant UI)<br/>2. Async sync with Firestore<br/>3. Reconcile differences<br/><br/>On Conflict:<br/>‚Ä¢ Firestore ALWAYS wins<br/>‚Ä¢ Overwrite SQLite<br/><br/>On Send:<br/>1. Write SQLite (pending)<br/>2. Write Firestore (async)<br/>3. Update SQLite (synced)<br/><br/>On Receive:<br/>1. Listener fires<br/>2. Write SQLite<br/>3. Update UI"]
    end
    
    subgraph "Data Flow: Global AI Summary on App Open (NEW)"
        AISUMMARY["1Ô∏è‚É£ User opens app (foreground)<br/>2Ô∏è‚É£ Check for unread messages<br/>3Ô∏è‚É£ Load cached summary instantly (< 500ms)<br/>4Ô∏è‚É£ Show summary modal (if unread > 0)<br/>5Ô∏è‚É£ Background: Call summarizeUnread<br/>6Ô∏è‚É£ Function fetches unread messages (delta)<br/>7Ô∏è‚É£ Process only new messages since watermark<br/>8Ô∏è‚É£ Send to GPT-4o-mini via Langchain<br/>9Ô∏è‚É£ Parse structured response<br/>üîü Merge with cached summary<br/>1Ô∏è‚É£1Ô∏è‚É£ Cache result (15 min TTL)<br/>1Ô∏è‚É£2Ô∏è‚É£ Update watermarks<br/>1Ô∏è‚É£3Ô∏è‚É£ Return to client<br/>1Ô∏è‚É£4Ô∏è‚É£ Swap in fresh summary in modal"]
    end
    
    subgraph "Data Flow: AI Priority Ordering (NEW)"
        AIPRIORITY["1Ô∏è‚É£ User opens app or receives message<br/>2Ô∏è‚É£ Calculate lightweight local score:<br/>   - Unread count (30%)<br/>   - Recency (20%)<br/>   - Affinity (10%)<br/>   - Question mark bonus (0.5)<br/>3Ô∏è‚É£ If localScore > 0.5:<br/>   - Call analyzePriorityBatch<br/>   - Get AI urgency signals<br/>   - Boost for unanswered questions<br/>4Ô∏è‚É£ Calculate final score<br/>5Ô∏è‚É£ Cache for 6 hours<br/>6Ô∏è‚É£ Sort chat list by score<br/>7Ô∏è‚É£ Apply visual indicators:<br/>   - Bold text (unread)<br/>   - Red ! badge (urgent)"]
    end
    
    subgraph "Data Flow: Global Action Items Tab (NEW)"
        AIACTION["1Ô∏è‚É£ User taps Action Items tab<br/>2Ô∏è‚É£ Query /actionItems collection<br/>   (collectionGroup where userId)<br/>3Ô∏è‚É£ Real-time listener active<br/>4Ô∏è‚É£ Sort by priority or deadline<br/>5Ô∏è‚É£ Display with chat name context<br/>6Ô∏è‚É£ User taps 'Mark Complete'<br/>7Ô∏è‚É£ Update status in Firestore<br/>8Ô∏è‚É£ Listener fires ‚Üí UI updates<br/>9Ô∏è‚É£ User taps 'View Context'<br/>üîü Navigate to chat, scroll to message"]
    end
    
    subgraph "Data Flow: Global Smart Search (NEW)"
        AISEARCH["1Ô∏è‚É£ User types search query<br/>2Ô∏è‚É£ Stage 1: Fast Search (< 1.5s)<br/>   - Context: Last 500 messages<br/>   - Model: GPT-4o-mini<br/>   - Return top 5-10 results<br/>3Ô∏è‚É£ Show Stage 1 results immediately<br/>4Ô∏è‚É£ Stage 2: Deep Search (2-4s)<br/>   - Context: All messages (5000)<br/>   - Model: GPT-4-turbo<br/>   - Return top 20 results<br/>5Ô∏è‚É£ Merge and re-rank<br/>6Ô∏è‚É£ Show refined results<br/>7Ô∏è‚É£ Cache (session-based)<br/>8Ô∏è‚É£ User taps result ‚Üí jump to message"]
    end
    
    %% Connections - User A Flow
    UAComp -->|User Action: Send| UAState
    UAState -->|Optimistic Write| UASQL
    UASQL -->|Queue Processor| FS
    UANet -->|Network Status| UAState
    
    %% Connections - User B Flow
    UBComp -->|View Message| UBState
    UBState -->|Mark Read| FS
    UBNet -->|Network Status| UBState
    
    %% Connections - Real-Time Sync
    FS -->|Real-Time Updates| ListenerA
    FS -->|Real-Time Updates| ListenerB
    FS -->|Real-Time Updates| MsgListenerA
    FS -->|Real-Time Updates| MsgListenerB
    FS -->|Real-Time Updates| PresenceA
    FS -->|Real-Time Updates| PresenceB
    FS -->|Real-Time Updates| ActionItemsListener
    FS -->|Real-Time Updates| SummaryListener
    
    ListenerA -->|New Chat Data| UAState
    ListenerB -->|New Chat Data| UBState
    MsgListenerA -->|New Messages| UAState
    MsgListenerB -->|New Messages| UBState
    PresenceA -->|Status Update| UAComp
    PresenceB -->|Status Update| UBComp
    ActionItemsListener -->|Action Items| UAState
    ActionItemsListener -->|Action Items| UBState
    SummaryListener -->|Fresh Summary| UAState
    SummaryListener -->|Fresh Summary| UBState
    
    UAState -->|Write on Receive| UASQL
    UBState -->|Write on Receive| UBSQL
    
    %% Connections - Push Notifications
    FS -->|onCreate Message| CF
    CF -->|Send Notification| FCM
    FCM -->|Foreground Push| UANotif
    FCM -->|Foreground Push| UBNotif
    UANotif -->|Display Toast| UAComp
    UBNotif -->|Display Toast| UBComp
    
    %% Connections - Auth
    AUTH -->|Validate & Refresh| FS
    AUTH -->|Token Management| UAState
    AUTH -->|Token Management| UBState
    
    %% Network Detection
    UANet -->|Reconnect Event| UASQL
    UBNet -->|Reconnect Event| UBSQL
    
    %% Global AI Flow Connections
    UAComp -->|App Open Event| UAAI
    UBComp -->|App Open Event| UBAI
    UAComp -->|Search Query| UAAI
    UBComp -->|Search Query| UBAI
    UAComp -->|View Action Items| UAAI
    UBComp -->|View Action Items| UBAI
    
    UAAI -->|Call Global AI Functions| CF
    UBAI -->|Call Global AI Functions| CF
    CF -->|Fetch Unread Messages| FS
    CF -->|Send Context| LANGCHAIN
    LANGCHAIN -->|API Request| OPENAI
    OPENAI -->|AI Response| LANGCHAIN
    LANGCHAIN -->|Parsed Result| CF
    CF -->|Cache Result (Global)| FS
    CF -->|Return to Client| UAAI
    CF -->|Return to Client| UBAI
    UAAI -->|Update State| UAState
    UBAI -->|Update State| UBState
    UAState -->|Trigger Render| UAComp
    UBState -->|Trigger Render| UBComp
    
    %% Priority Detection on Receive
    MsgListenerA -->|New Message Event| UAAI
    MsgListenerB -->|New Message Event| UBAI
    UAAI -->|Background Priority Check| CF
    UBAI -->|Background Priority Check| CF
    
    %% Action Items Collection
    CF -->|Write Global Action Items| FS
    
    %% Styling
    classDef client fill:#e1f5ff,stroke:#01579b,stroke-width:2px
    classDef firebase fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef listener fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef flow fill:#e8f5e9,stroke:#1b5e20,stroke-width:2px
    classDef sync fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef ai fill:#e8eaf6,stroke:#1a237e,stroke-width:2px
    classDef newflow fill:#fff9c4,stroke:#f57f17,stroke-width:3px
    
    class UA,UB,UAComp,UAState,UASQL,UANotif,UANet,UAAI,UBComp,UBState,UBSQL,UBNotif,UBNet,UBAI client
    class FS,AUTH,CF,FCM firebase
    class ListenerA,ListenerB,PresenceA,PresenceB,MsgListenerA,MsgListenerB,ActionItemsListener,SummaryListener listener
    class SEND,RECEIVE,OFFLINE,PRESENCE flow
    class SYNC sync
    class OPENAI,LANGCHAIN ai
    class AISUMMARY,AIPRIORITY,AIACTION,AISEARCH newflow
